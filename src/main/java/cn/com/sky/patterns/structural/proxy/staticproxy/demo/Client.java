package cn.com.sky.patterns.structural.proxy.staticproxy.demo;

/**
 * <pre>
 *
 * 一、 代理模式的应用场景：
 *
 * 如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：
 *
 * 1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。
 *
 * 2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。
 *
 * 二、 装饰器模式与代理模式的区别：
 *
 * 1、装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。
 *
 * 换句话说，用代理模式，代理类可以对它的客户隐藏一个对象的具体信息。
 *
 * 因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。
 *
 * 当我们使用装饰器模式的时候，我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。
 *
 * 2、装饰器模式应当为所装饰的对象提供增强功能，而代理模式对所代理对象的使用施加控制，并不提供对象本身的增强功能。
 *
 * 代理模式中，代理类对被代理的对象有控制权，决定其执行或者不执行。
 *
 * 而装饰模式中，装饰类对代理对象没有控制权，只能为其增加一层装饰，以加强被装饰对象的功能，仅此而已。
 *
 * 总结：
 * 装饰器模式：增强功能；
 * 代理模式：施加控制；
 * 装饰器模式应当为所装饰的对象提供增强功能，而代理模式对所代理对象的使用施加控制，并不提供对象本身的增强功能。
 *
 * 三、
 *
 * 我们可以用另外一句话来总结这些差别：使用代理模式，代理和真实对象之间的的关系通常在编译时就已经确定了，而装饰者能够在运行时递归地被构造。
 *
 * </pre>
 */
public class Client {

    public static void main(String[] args) {
        Sourceable source = new Proxy();
        source.method();
    }

}