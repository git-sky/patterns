package cn.com.sky.patterns.behavioral.visitor.dynamic_dispatch;

/**
 * <pre>
 * 
 *  动态分派 　　Java通过方法的重写支持动态分派。
 *  
 *  分派的类型 　　一个方法所属的对象叫做方法的接收者，方法的接收者与方法的参数统称做方法的宗量。
 *  
 * 根据分派可以基于多少种宗量，可以将面向对象的语言划分为单分派语言(Uni-Dispatch)和多分派语言(Multi-Dispatch)。
 * 单分派语言根据一个宗量的类型进行对方法的选择， 多分派语言根据多于一个的宗量的类型对方法进行选择。
 *  
 *  C++和Java均是单分派语言，多分派语言的例子包括CLOS和Cecil。
 *  按照这样的区分，Java就是动态的单分派语言，因为这种语言的动态分派仅仅会考虑到方法的接收者的类型，
 *  同时又是静态的多分派语言，因为这种语言对重载方法的分派会考虑到方法的接收者的类型以及方法的所有参数的类型。
 *  在一个支持动态单分派的语言里面，有两个条件决定了一个请求会调用哪一个操作：一是请求的名字，而是接收者的真实类型。
 *  单分派限制了方法的选择过程，使得只有一个宗量可以被考虑到，这个宗量通常就是方法的接收者。
 * 在Java语言里面，如果一个操作是作用于某个类型不明的对象上面，那么对这个对象的真实类型测试仅会发生一次，这就是动态的单分派的特征。
 *
 *
 */
public class Client {

	public static void main(String[] args) {
		Horse h = new BlackHorse();
		h.eat();
	}

}