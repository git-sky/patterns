package cn.com.sky.patterns.behavioral.mediator.model;

/**
 * <pre>
 * 
 * 中介者模式主要包含如下几个角色：
 * 
 * Mediator: 抽象中介者。定义了同事对象到中介者对象之间的接口。
 * 
 * ConcreteMediator: 具体中介者。实现抽象中介者的方法，它需要知道所有的具体同事类，同时需要从具体的同事类那里接收信息，并且向具体的同事类发送信息。
 * 
 * Colleague: 抽象同事类。
 * 
 * ConcreteColleague: 具体同事类。每个具体同事类都只需要知道自己的行为即可，但是他们都需要认识中介者。
 * 
 * 在中介者模式中中介者对象处于核心地位，因为它定义了整个系统中所有具体同事类之间的关系。在整个系统中它主要承担两个方面的责任。
 * 
 * 1、 结构上起到中转作用。通过中介者对象对关系的封装，使得具体的同事类不再需要显示的引用其他对象，它只需要通过中介者就可以完成与其他同事类之间的通信。
 * 
 * 2、 行为上起到协作作用。中介者对同事类之间的关系进行封装，同事类在不需要知道其他对象的情况下通过中介者与其他对象完成通信。在这个过程中同事类是不需要指明中介者该如何做，中介者可以根据自身的逻辑来进行协调，对同事的请求进一步处理，将同事成员之间的关系行为进行分离和封装。
 * 
 * 同时由于中介者对对象的关系进行了封装，使得各个同事类之间的耦合减少了，使得他们可以独立改变和复用。
 * 
 * 
 * Mediator:
 * 用来减少对象单的直接通讯的依赖关系。使用一个中间类来管理消息的方向。
 * java.util.Timer
 * java.util.concurrent.Executor#execute()
 * java.util.concurrent.ExecutorService#submit()
 * java.lang.reflect.Method#invoke()
 * 
 * 
 */
public class Client {

}
